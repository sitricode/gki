name: Build GKI

on:
  workflow_call:
    inputs:
      KernelSU:
        type: string
      SUSFS4KSU:
        type: string
      BUILD_BOOTIMG:
        type: string
      BUILD_LKMS:
        type: string
      UPLOAD2GH:
        type: string
      KSU_MANUAL_HOOK:
        type: string
      LAST_BUILD:
        type: string
      TODO:
        type: string

  workflow_dispatch:
    inputs:
      TODO:
        description: To do
        default: ''
        type: choice
        options:
          - "kernel"
          - "defconfig"

      KernelSU:
        description: KernelSU Variant
        default: ''
        type: choice
        options:
          - "None"
          - "Official"
          - "Next"
          - "Suki"

      SUSFS4KSU:
        description: SUSFS (KSU Needed)
        default: false
        type: boolean

      KSU_MANUAL_HOOK:
        description: KSU Manual Hook
        default: false
        type: boolean

      BUILD_BOOTIMG:
        description: Build Boot Image
        default: false
        type: boolean

      BUILD_LKMS:
        description: Build Kernel Modules
        default: false
        type: boolean

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Determine Build Status
        run: |
          if [ "${{ toJson(github.event.inputs) }}" == "null" ]; then
            echo "STATUS=RELEASE" >> $GITHUB_ENV
            echo "TRIGGER=workflow_call" >> $GITHUB_ENV
          else
            echo "STATUS=BETA" >> $GITHUB_ENV
            echo "TRIGGER=workflow_dispatch" >> $GITHUB_ENV
          fi

      - name: Validate Inputs and Secrets
        env:
          KSU: ${{ inputs.KernelSU }}
          CHAT_ID: ${{ secrets.CHAT_ID }}
          TOKEN: ${{ secrets.TOKEN }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          USE_KSU_SUSFS: ${{ inputs.SUSFS4KSU }}
          USE_KSU_MANUAL_HOOK: ${{ inputs.KSU_MANUAL_HOOK }}
        run: |
          ret=0
          _error() {
              echo "‚ùå ERROR: $*"
              let ret++
          }

          if [[ -z "$CHAT_ID" ]]; then
            _error "Missing CHAT_ID secret (Telegram Chat ID)"
          fi
          if [[ -z "$TOKEN" ]]; then
            _error "Missing TOKEN secret (Telegram Bot Token)"
          fi
          if [[ -z "$GH_TOKEN" ]]; then
            _error "Missing GH_TOKEN secret (GitHub PAT)"
          fi

          if [[ $KSU == "None" && $USE_KSU_SUSFS == "true" ]]; then
              _error "Cannot use SuSFS without KernelSU"
          fi

          if [[ $KSU == "None" && $USE_KSU_MANUAL_HOOK == "true" ]]; then
            _error "Cannot use KSU Manual Hooks without KernelSU!"
          fi

          if [[ $KSU == "Official" && $USE_KSU_MANUAL_HOOK == "true" ]]; then
              _error "KernelSU Official no longer supports manual hook"
          fi

          if [[ $ret -gt 0 ]]; then
            exit $ret
          fi

      - name: Install Dependencies
        run: |
          export MAN_DISABLE=true
          sudo apt update -y
          sudo apt install -y bc cpio flex bison aptitude gh git python-is-python3 \
                              tar perl wget curl lz4 zstd libarchive-tools
          sudo aptitude install -y libssl-dev

      - name: Run Build Script
        env:
          KSU: ${{ inputs.KernelSU }}
          CHAT_ID: ${{ secrets.CHAT_ID }}
          TOKEN: ${{ secrets.TOKEN }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          USE_KSU_SUSFS: ${{ inputs.SUSFS4KSU }}
          BUILD_LKMS: ${{ inputs.BUILD_LKMS }}
          BUILD_BOOTIMG: ${{ inputs.BUILD_BOOTIMG }}
          USE_KSU_MANUAL_HOOK: ${{ inputs.KSU_MANUAL_HOOK }}
          LAST_BUILD: ${{ inputs.LAST_BUILD }}
          NIGHTLY_LINK: "https://nightly.link/${{ github.repository_owner }}/${{ github.event.repository.name }}/actions/runs/${{ github.run_id }}"
          TODO: ${{ inputs.TODO }}
        run: |
          chmod +x *.sh
          [[ "$TODO" == "defconfig" ]] && export GENERATE_DEFCONFIG=true
          ./build.sh

      - name: Upload Artifacts (ZIP & IMG)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BASE_NAME }}-${{ github.run_number }}
          path: |
            artifacts/*.zip
            artifacts/*.img

      - name: Upload Artifacts (Info File)
        uses: actions/upload-artifact@v4
        with:
          name: info-${{ github.run_number }}
          path: artifacts/*.txt
